<?php 
/**
 * Implementation of hook_block()
 */
require_once('define.php');

function website_block($op = 'list', $delta = 'home_pic') {
	if ($op == 'list') {
		// 首页图片轮播
		$blocks['home_pic'] = array(
			'info' => '首页图片轮播',
			'visibility' => 1,
			'pages' => 'home',
		);
		$blocks['home_video'] = array(
			'info' => '首页视频',
			'visibility' => 1,
			'pages' => 'home',
		);
		$blocks['menu'] = array(
			'info' => '网站菜单',
		);
		$blocks['footer'] = array(
			'info' => '底部导航',
		);
		$blocks['product_term'] = array(
			'info' => '产品分类',
			'visibility' => 0,
			'pages' => 'home',
		);
		$blocks['hot_product'] = array(
			'info' => '热门产品',
			'visibility' => 0,
			'pages' => 'home',
		);
		$blocks['sencond_term'] = array(
			'info' => '二级分类',
			'visibility' => 0,
			'pages' => 'taxonomy/term/*',
		);
		$blocks['side_article'] = array(
			'info' => '健康与水',
			'visibility' => 0,
			'pages' => 'home',
		);
		$blocks['side_solution'] = array(
			'info' => '解决方案',
			'visibility' => 0,
			'pages' => 'home',
		);
		return $blocks;
	}else if ($op == 'view') {
		$block = array();
		switch ($delta) {
			case 'home_pic':
				return _website_block_pic_turn();
			case 'menu':
				return _website_block_menu();
			case 'footer':
				return _website_block_footer();
			case 'home_video':
				$block['subject'] = '首页视频';
				$block['content'] = '首页视频';
				return $block;
			case 'product_term':
				return _website_block_product_term();
			case 'hot_product':
				return _website_block_hot_product();
			case 'sencond_term':
				return _website_block_sencond_term();
			case 'side_article':
				return _website_block_side_article();
			case 'side_solution':
				return _website_block_side_solution();
		}	
		
	}
}
function _website_block_sencond_term(){
	$args = arg();
	if($args[0] == 'taxonomy' && $args[1] == 'term'){
		$term = '';
	}
}
function _website_block_hot_product(){
	$block = $data = array();
	$node_type = NODE_TYPE_PRODUCT;
	$sql = "SELECT n.nid, n.title, p.field_present_price_value, nc.totalcount, f.filepath
	FROM {node} n
	INNER JOIN {node_counter} nc ON n.nid = nc.nid
	INNER JOIN {upload} up ON n.nid = up.nid
	INNER JOIN {files} f ON up.fid = f.fid
	INNER JOIN {content_type_product} p ON n.nid = p.nid 
	WHERE n.type = '{$node_type}'
	GROUP BY n.nid
	ORDER BY nc.daycount DESC, nc.totalcount DESC
	LIMIT 0, 4
	";
	$result = db_query($sql);
	while ($row = db_fetch_object($result)){
		$data[] = $row;
	}
	
	$block['subject'] = '热门产品';
	$block['content'] = '热门产品';
	$block['data'] = $data;
	return $block;
}

function _website_block_side_article(){
	$block = $data = array();
	$node_type = NODE_TYPE_ARTICLE;
	$sql = "SELECT n.nid, n.title
	FROM {node} n
	INNER JOIN {node_counter} nc ON n.nid = nc.nid
	WHERE n.type = '$node_type'
	ORDER BY nc.daycount DESC, nc.totalcount DESC
	LIMIT 0, 10
	";
	$result = db_query($sql);
	while ($row = db_fetch_object($result)){
		$data[] = $row;
	}
	
	$block['subject'] = '健康与水';
	$block['content'] = '健康与水';
	$block['data'] = $data;
	return $block;
}

function _website_block_side_solution(){
	$block = $data = array();
	$node_type = NODE_TYPE_SOLUTION;
	$sql = "SELECT n.nid, n.title
	FROM {node} n
	INNER JOIN {node_counter} nc ON n.nid = nc.nid
	WHERE n.type = '$node_type'
	ORDER BY nc.daycount DESC, nc.totalcount DESC
	LIMIT 0, 10
	";
	$result = db_query($sql);
	while ($row = db_fetch_object($result)){
		$data[] = $row;
	}
	
	$block['subject'] = '解决方案';
	$block['content'] = '解决方案';
	$block['data'] = $data;
	return $block;
}

function _website_block_product_term(){
	$myterms = _website_get_terms(TAXONOMY_VID_PRODUCT_TYPE);
	
	
	$block['subject'] = '产品分类';
	$block['myterms'] = $myterms;
	$block['content'] = '产品分类';
	return $block;
}
/**
 * 首页图片轮播区块
 */
function _website_block_pic_turn(){
	$block = $data = array();
	$sql = "SELECT n.nid, nr.title, nr.body, pic.field_url_value, pic.field_weight_value, f.filepath
		FROM {node} n
		INNER JOIN {content_type_pic_turn} pic ON n.nid = pic.nid
		INNER JOIN {upload} up ON n.nid = up.nid
		INNER JOIN {files} f ON up.fid = f.fid
		INNER JOIN {node_revisions} nr ON n.nid = nr.nid
		ORDER BY pic.field_weight_value, n.nid DESC
		LIMIT 0, 4
	";
	$result = db_query($sql);
	while ($row = db_fetch_object($result)){
		$data[] = $row;
	}
	
	$block['subject'] = '首页图片轮播';
	$block['content'] = '首页图片轮播';
	$block['data'] = $data;
	return $block;
}

function _website_block_footer(){
	/*产品类型
	$terms = taxonomy_get_tree(TAXONOMY_VID_PRODUCT_TYPE);
	$i=0;
	foreach($terms as $term){
		if($term->depth > 0){
			$provide[] = $term;
			$i++;
			if($i>=7) break;
		}
	}*/
	//品牌
	$brand = taxonomy_get_tree(TAXONOMY_VID_BRAND_TYPE);
	//净水知识
	$article = taxonomy_get_tree(TAXONOMY_VID_ARTICLE_TYPE);
	//解决方案
	$solution = taxonomy_get_tree(TAXONOMY_VID_SOLUTION_TYPE);
	//客户案例
	$case = _website_get_node(NODE_TYPE_CASE, TAXONOMY_TID_POSITION_FOOTER_MENU);
	//页面
	$page = _website_get_node(NODE_TYPE_PAGE, TAXONOMY_TID_POSITION_FOOTER_MENU, 'sticky DESC', 6);
	
	$block['brand'] = $brand;
	$block['article'] = $article;
	$block['solution'] = $solution;
	$block['case'] = $case;
	$block['page'] = $page;
	
	$block['subject'] = 'footer';
	$block['content'] = 'footer';
	return $block;
}
/**
 * 菜单区块
 * @return string
 */
function _website_block_menu(){
	$myterms = _website_get_terms(TAXONOMY_VID_PRODUCT_TYPE);
	foreach ($myterms as $tid => $myterm){
		//解决方案
		$myterms[$tid]['solutions'] = _website_get_node(NODE_TYPE_SOLUTION, $myterm['child_ids']);
		//客户案例
		$myterms[$tid]['case'] = _website_get_node(NODE_TYPE_CASE, $myterm['child_ids']);
	}
	
	$block['subject'] = '网站菜单';
	$block['myterms'] = $myterms;
	$block['content'] = '网站菜单';
	return $block;
}
function _website_get_terms($vid){
	$args = arg();
	if($args[0] == 'taxonomy' && $args[1] == 'term' && is_numeric($args[2])){
		$active_child_tid = $args[2];
	}
	if($args[0] == 'node' && is_numeric($args[1])){
		$node = node_load($args[1]);
		foreach($node->taxonomy as $term){
			if($term->vid == TAXONOMY_VID_PRODUCT_TYPE){
				$active_child_tid = $term->tid;
			}
		}
	}
	$myterms = array();
	$terms = taxonomy_get_tree($vid);
	foreach($terms as $term){
		//一级分类
		if($term->depth == 0){
			$myterms[$term->tid]['parent'] = $term;
		}else{
			//二级分类
			if(count($myterms[$term->parents[0]]['child']) <5){
				$myterms[$term->parents[0]]['child'][] = $term;
				$myterms[$term->parents[0]]['child_ids'][] = $term->tid;
			}
			
			if($active_child_tid == $term->tid){
				$myterms[$term->parents[0]]['parent']->class = 'active';
			}
		}
	}
	return array_slice($myterms,0,5);
}
function _website_get_node($node_type, $tids='', $order_by='sticky DESC', $limit=4){
	$data = array();
	if($tids){
		if(is_array($tids))
			$tids_str = implode(', ', $tids);
		else 
			$tids_str = $tids;
		$join .= "INNER JOIN {term_node} tn ON n.nid = tn.nid";
		$where .= "AND tn.tid IN ($tids_str)";
		
	}
	$sql = "SELECT n.* FROM {node} n
		{$join}
		WHERE n.type='{$node_type}'  AND status =1 {$where}
		ORDER BY {$order_by} LIMIT 0, {$limit}";
	$result = db_query($sql);
	while ($row = db_fetch_object($result)){
		$data[] = $row;
	}
	return $data;
}


/**
 * hook_menu
 */
function website_menu(){
	$items['home'] = array(
		'page callback' => '_website_home',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['daogou'] = array(
		'title' => '导购指南',
		'page callback' => '_website_daogou',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['product/search'] = array(
		'page callback' => '_website_page_product_search',
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['product/search/%'] = array(
		'page callback' => '_website_page_product_search',
		'page arguments' => array(2),
		'access callback' => TRUE,
		'type' => MENU_CALLBACK,
	);
	$items['node-type/%'] = array(
			'page callback' => '_website_page_node_type',
			'page arguments' => array(1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
	);
	$items['product/muying'] = array(
			'title' => '母婴专题',
			'page callback' => '_website_page_muying',
			'access callback' => TRUE,
			'type' => MENU_CALLBACK,
	);
	return $items;
}
function _website_page_node_type($nodetype){
	$sql = "SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n  ";
	$sql_count = "SELECT COUNT(DISTINCT(n.nid)) FROM {node} n ";
	$where = " WHERE n.status = 1 AND n.type = '{$nodetype}'";
	$sql = $sql.$where;
	$sql_count = $sql_count.$where;
	$result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count);
	$output = '<div id="taxonomy-term-page">'.taxonomy_render_nodes($result).'</div>';
	return $output;
}
function _website_page_product_search($filter=''){
	if($filter==''){
		$type = trim($_POST['type']);
		$brand = trim($_POST['brand']);
		$name = trim($_POST['name']);
	}else{
		//拆解参数
		$cond = explode('-', $filter);
		$type = intval($cond[0]);
		$brand = intval($cond[1]);
		$name = urldecode(trim($cond[2]));
	}
	$sql = "SELECT DISTINCT(n.nid), n.sticky, n.title, n.created FROM {node} n  ";
	$sql_count = "SELECT COUNT(DISTINCT(n.nid)) FROM {node} n ";
	$join = '';
	//产品类型
	if($type > 0){
		$join .= " INNER JOIN {term_node} tn0 ON n.nid = tn0.nid AND tn0.tid = {$type}";
	}
	//产品品牌
	if($brand > 0){
		$join .= " INNER JOIN {term_node} tn1 ON n.nid = tn1.nid AND tn1.tid = {$brand}";
	}
	$nodetype = NODE_TYPE_PRODUCT;
	$where = " WHERE n.status = 1 AND n.type = '{$nodetype}'";
	//产品名称
	if($name){
		$where .= " AND n.title LIKE '%{$name}%'";
	}
	$sql = $sql.$join.$where;
	$sql_count = $sql_count.$join.$where;
	$result = pager_query($sql, variable_get('default_nodes_main', 10), 0, $sql_count);
	
	$output .= '<form id="search-product" method="post" action="'.url('product/search').'">';
	//显示品牌
	$p_brands = taxonomy_get_tree(TAXONOMY_VID_BRAND_TYPE);
	$output .= '<div class="proc-item">
	品牌：';
	foreach($p_brands as $child){
		$class = '';
		if($child->tid == $brand){
			$class = 'active';
		}
		$output .= '<span>'.l($child->name, "product/search/{$type}-{$child->tid}-{$encode_name}", array('attributes' => array('class' => $class))).'</span>';
	}
	$output .= '
	</div>';
	
	//显示产品类型分类
	$p_terms = _website_get_terms(TAXONOMY_VID_PRODUCT_TYPE);
	$encode_name = urlencode($name);
	foreach($p_terms as $tmp){
		$output .= '<div class="proc-item">
			'.$tmp['parent']->name.'：';
		foreach($tmp['child'] as $child){
			$class = '';
			if($child->tid == $type){
				$class = 'active';
				
			}
			$output .= '<span>'.l($child->name, "product/search/{$child->tid}-{$brand}-{$encode_name}", array('attributes' => array('class' => $class))).'</span>';
		}
		$output .= '
		</div>'; 
	}
	
	$output .= '
		产品名称：&nbsp;&nbsp;<input name="name" value="'.$name.'" />
		<input type="submit" value="搜索"/>
		<br/><br/>
	<input type="hidden" value="'.$type.'" name="type" />
	<input type="hidden" value="'.$brand.'" name="brand" />
	</form>'; 
	
	$output .= '<div id="taxonomy-term-page">'.taxonomy_render_nodes($result).'</div>';
	return $output;
}
function _website_home(){
	return ' ';
}
function _website_daogou(){
	return ' ';
}
function _website_page_muying(){
	return ' ';
}

/**
 * 适用于本项目的l()方法，支持url别名的active
 * @param unknown_type $text
 * @param unknown_type $path
 * @param unknown_type $options
 * @return string
 */
function ll($text, $path, $options = array()){
	global $language;

	// Merge in defaults.
	$options += array(
			'attributes' => array(),
			'html' => FALSE,
	);

	// Append active class.
	//在原函数的基础上增加drupal_get_path_alias($_GET['q']) == $path
	if (($path == $_GET['q'] || ($path == '<front>' && drupal_is_front_page()) || drupal_get_path_alias($_GET['q']) == $path) &&
			(empty($options['language']) || $options['language']->language == $language->language)) {
		if (isset($options['attributes']['class'])) {
			$options['attributes']['class'] .= ' active';
		}
		else {
			$options['attributes']['class'] = 'active';
		}
	}

	// Remove all HTML and PHP tags from a tooltip. For best performance, we act only
	// if a quick strpos() pre-check gave a suspicion (because strip_tags() is expensive).
	if (isset($options['attributes']['title']) && strpos($options['attributes']['title'], '<') !== FALSE) {
		$options['attributes']['title'] = strip_tags($options['attributes']['title']);
	}

	return '<a href="'. check_url(url($path, $options)) .'"'. drupal_attributes($options['attributes']) .'>'. ($options['html'] ? $text : check_plain($text)) .'</a>';
}

function website_theme(){
	return array(
		'taxonomy_term_page' => array(
		  'template' => 'taxonomy-term-page',
	      'arguments' => array('tids' => array(), 'result' => NULL),
	    ),
	);
}
function website_preprocess_taxonomy_term_page(&$variables) {
	// Only display the description if we have a single term, to avoid clutter and confusion.
	if (count($variables['tids']) == 1) {
		$term = taxonomy_get_term($variables['tids'][0]);
		$variables['name'] = $term->name;
		$variables['description'] = $term->description;
	}
	
	$variables['content'] = taxonomy_render_nodes($variables['result']);
	
}

function website_preprocess_page(&$variables){
	$variables['product_terms'] = _website_get_terms(TAXONOMY_VID_PRODUCT_TYPE);
}

function website_substr($text, $start, $length = NULL, $ex = 2) {
	$strlen = strlen($text);
	// Find the starting byte offset
	$bytes = 0;
	if ($start > 0) {
		// Count all the continuation bytes from the start until we have found
		// $start characters
		$bytes = -1; $chars = -1;
		while ($bytes < $strlen && $chars < $start) {
			$bytes++;
			$c = ord($text[$bytes]);
			if ($c < 0x80 || $c >= 0xC0) {
				if ($c >= 0xC0) {
					$chars += $ex;
				}
				else {
					$chars++;
				}
			}
		}
	}
	else if ($start < 0) {
		// Count all the continuation bytes from the end until we have found
		// abs($start) characters
		$start = abs($start);
		$bytes = $strlen; $chars = 0;
		while ($bytes > 0 && $chars < $start) {
			$bytes--;
			$c = ord($text[$bytes]);
			if ($c < 0x80 || $c >= 0xC0) {
				if ($c >= 0xC0) {
					$chars += $ex;
				}
				else {
					$chars++;
				}
			}
		}
	}
	$istart = $bytes;

	// Find the ending byte offset
	if ($length === NULL) {
		$bytes = $strlen - 1;
	}
	else if ($length > 0) {
		// Count all the continuation bytes from the starting index until we have
		// found $length + 1 characters. Then backtrack one byte.
		$bytes = $istart; $chars = 0;
		while ($bytes < $strlen && $chars < $length) {
			$bytes++;
			$c = ord($text[$bytes]);
			if ($c < 0x80 || $c >= 0xC0) {
				if ($c >= 0xC0) {
					$chars += $ex;
				}
				else {
					$chars++;
				}
			}
		}
		$bytes--;
	}else if ($length < 0) {
		// Count all the continuation bytes from the end until we have found
		// abs($length) characters
		$length = abs($length);
		$bytes = $strlen - 1; $chars = 0;
		while ($bytes >= 0 && $chars < $length) {
			$c = ord($text[$bytes]);
			if ($c < 0x80 || $c >= 0xC0) {
				if ($c >= 0xC0) {
					$chars += $ex;
				}
				else {
					$chars++;
				}
			}
			$bytes--;
		}
	}
	$iend = $bytes;

	return substr($text, $istart, max(0, $iend - $istart + 1));
}

/**
 * Implementation of hook_db_rewrite_sql().
 */
function website_db_rewrite_sql($query, $primary_table, $primary_field, $args) {
	/**注释于2012-7-16
	if($primary_field == 'nid' && $primary_table == 'n'){
		$args = arg();
		$alias = drupal_get_path_alias($_GET['q']);
		if($args[0] == 'taxonomy' && $args[1] == 'term' && is_numeric($args[2])){
			$node_type = trim($args[3]);
			if(empty($node_type) || !in_array($node_type, array(NODE_TYPE_PRODUCT, NODE_TYPE_CASE, NODE_TYPE_SOLUTION))){
				$node_type = NODE_TYPE_PRODUCT;
			}
			$array['where'] = "(n.type = '{$node_type}')";
			if($args[3]){
				$array['join'] = " INNER JOIN {term_node} tn2 ON n.nid = tn2.nid AND tn2.tid = {$args[3]} ";
			}
		}
	}
	return $array;
	*/
}

/**
 * Implementation of hook_link().
 */
function website_link($type, $node = NULL, $teaser = FALSE) {
	global $id;
	$links = array();

	if ($type == 'node') {
		$statistics = statistics_get($node->nid);
		$links['click_times'] = intval($statistics['totalcount']);
	}

	return $links;
}
